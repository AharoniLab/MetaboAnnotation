% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MatchedSpectra.R, R/matchSpectra.R
\name{MatchedSpectra}
\alias{MatchedSpectra}
\alias{MatchedSpectra-class}
\alias{length,MatchedSpectra-method}
\alias{show,MatchedSpectra-method}
\alias{[,MatchedSpectra,ANY-method}
\alias{target}
\alias{query}
\alias{whichTarget}
\alias{whichQuery}
\alias{spectraVariables,MatchedSpectra-method}
\alias{$,MatchedSpectra-method}
\alias{spectraData,MatchedSpectra-method}
\alias{pruneTarget}
\alias{CompareSpectraParam}
\title{Representation of Spectra matches}
\usage{
MatchedSpectra(
  query = Spectra(),
  target = Spectra(),
  matches = data.frame(query_idx = integer(), target_idx = integer(), score =
    numeric())
)

\S4method{length}{MatchedSpectra}(x)

\S4method{show}{MatchedSpectra}(object)

\S4method{[}{MatchedSpectra,ANY}(x, i, j, ..., drop = FALSE)

target(object)

query(object)

whichTarget(object)

whichQuery(object)

\S4method{spectraVariables}{MatchedSpectra}(object)

\S4method{$}{MatchedSpectra}(x, name)

\S4method{spectraData}{MatchedSpectra}(object, columns = spectraVariables(object))

pruneTarget(object)

CompareSpectraParam(
  MAPFUN = joinPeaks,
  tolerance = 0,
  ppm = 5,
  FUN = MsCoreUtils::ndotproduct,
  requirePrecursor = TRUE,
  requirePrecursorPeak = FALSE,
  THRESHFUN = function(x) which(x >= 0.7),
  ...
)
}
\arguments{
\item{query}{\code{Spectra} with the query spectra.}

\item{target}{\code{Spectra} with the spectra against which \code{query} has been
matched.}

\item{matches}{\code{data.frame} with columns \code{"query_idx"} (\code{integer}),
\code{"target_idx"} (\code{integer}) and \code{"score"} (\code{numeric}) representing the
\emph{n:m} mapping of elements between the \code{query} and the \code{target} \code{Spectra}.}

\item{object}{\code{MatchedSpectra} object.}

\item{i}{\code{integer} or \code{logical} defining the \code{query} spectra to keep.}

\item{j}{for \code{[}: ignored.}

\item{drop}{for \code{[}: ignored.}
}
\value{
See individual method desciption above for details.
}
\description{
Matches between query and target spectra can be represented by the
\code{MatchedSpectra} object. Functions like the \code{\link[=matchSpectra]{matchSpectra()}} function will
return this type of object. By default, all data accessors work as
\emph{left joins} between the \emph{query} and the \emph{target} spectra, i.e. values are
returned for each \emph{query} spectrum with eventual duplicated entries (values)
if the query spectrum matches more than one target spectrum.
}
\section{Creation and subsetting}{


\code{MatchedSpectra} objects can be created with the \code{MatchedSpectra} function
providing the \code{query} and \code{target} \code{Spectra} as well as a \code{data.frame} with
the
\itemize{
\item \code{[} subset the \code{MatchedSpectra} selecting \code{query} spectra to keep with
parameter \code{i}. The \code{target} spectra will by default be returned as-is.
}
}

\section{Extracting data}{

\itemize{
\item \code{$} extracts a single spectra variable from the \code{MatchedSpectra} \code{x}. Use
\code{spectraVariables} to get all available spectra variables. Prefix
\code{"target_"} is used for spectra variables from the \emph{target} \code{Spectra}.
Similar to a left join between the query and target spectra, this function
returns a value for each query spectrum with eventual duplicated values for
query spectra matching more than one target spectrum. If spectra variables
from the target spectra are extracted, an \code{NA} is reported for \emph{query}
spectra that don't match any target spectra. See examples below for more
details.
\item \code{length} returns the number of matches.
\item \code{pruneTarget} \emph{cleans} the \code{MatchedSpectra} object by removing non-matched
target spectra.
\item \code{spectraData} returns spectra variables from the query and/or target
\code{Spectra} as a \code{DataFrame}. Parameter \code{columns} allows to define which
variables should be returned (defaults to
\code{columns = spectraVariables(object)}), spectra variable names of the target
spectra need to be prefixed with \code{target_} (e.g. \code{target_msLevel} to get
the MS level from target spectra). Similar to \code{$}, this function performs
a \emph{left join} of spectra variables from the \emph{query} and \emph{target} spectra
returning all values for all query spectra (eventually returning duplicated
elements for query spectra matching multiple target spectra) and the values
for the target spectra matched to the respective query spectra. See help on
\code{$} above or examples below for details.
\item \code{spectraVariables} returns all available spectra variables in the \emph{query}
and \emph{target} spectra. The prefix \code{"target_"} is used to label spectra
variables of target spectra (e.g. the name of the spectra variable for the
MS level of target spectra is called \code{"target_msLevel"}).
\item \code{target} returns the \emph{target} \code{Spectra}.
\item \code{query} returns the \emph{query} \code{Spectra}.
\item \code{whichTarget} returns an \code{integer} with the indices of the spectra in
\emph{target} that match at least on spectrum in \emph{query}.
\item \code{whichQuery} returns an \code{integer} with the indices of the spectra in
\emph{query} that match at least on spectrum in \emph{target}.
}
}

\examples{

## Creating a dummy MatchedSpectra object.
library(Spectra)
df1 <- DataFrame(
    msLevel = 2L, rtime = 1:10,
    spectrum_id = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"))
df2 <- DataFrame(
    msLevel = 2L, rtime = rep(1:10, 20),
    spectrum_id = rep(c("A", "B", "C", "D", "E"), 20))
sp1 <- Spectra(df1)
sp2 <- Spectra(df2)
## Define matches between query spectrum 1 with target spectra 2 and 5,
## query spectrum 2 with target spectrum 2 and query spectrum 4 with target
## spectra 8, 12 and 15.
ms <- MatchedSpectra(
    sp1, sp2, matches = data.frame(query_idx = c(1L, 1L, 2L, 4L, 4L, 4L),
                                   target_idx = c(2L, 5L, 2L, 8L, 12L, 15L),
                                   score = 1:6))

## Which of the query spectra match at least one target spectrum?
whichQuery(ms)

## Extracting spectra variables: accessor methods for spectra variables act
## as "left joins", i.e. they return a value for each query spectrum, with
## eventually duplicated elements if one query spectrum matches more than
## one target spectrum.

## Which target spectrum matches at least one query spectrum?
whichTarget(ms)

## Extracting the retention times of the query spectra.
ms$rtime

## We have duplicated retention times for query spectrum 1 (matches 2 target
## spectra) and 4 (matches 3 target spectra). The retention time is returned
## for each query spectrum.

## Extracting retention times of the target spectra. Note that only retention
## times for target spectra matching at least one query spectrum are returned
## and an NA is reported for query spectra without matching target spectrum.
ms$target_rtime

## The first query spectrum matches target spectra 2 and 5, thus their
## retention times are returned as well as the retention time of the second
## target spectrum that matches also query spectrum 2. The 3rd query spectrum
## does match any target spectrum, thus `NA` is returned. Query spectrum 4
## matches target spectra 8, 12, and 15, thus the next reported retention
## times are those from these 3 target spectra. None of the remaining 6 query
## spectra matches any target spectra and thus `NA` is reported for each of
## them.

## `spectraData` can be used to extract all (or selected) spectra variables
## from the object. Same as with `$`, a left join between the specta
## variables from the query spectra and the target spectra is performed. The
## prefix `"target_"` is used to label the spectra variables from the target
## spectra. Below we extract selected spectra variables from the object.
res <- spectraData(ms, columns = c("rtime", "spectrum_id",
    "target_rtime", "target_spectrum_id"))
res
res$spectrum_id
res$target_spectrum_id

## Again, all values for query spectra are returned and for query spectra not
## matching any target spectrum NA is reported as value for the respecive
## variable.

## The example matched spectra object contains all query and all target
## spectra. Below we subset the object keeping only query spectra that are
## matched to at least one target spectrum.
ms_sub <- ms[whichQuery(ms)]

## ms_sub contains now only 3 query spectra:
length(query(ms_sub))

## while the original object contains all 10 query spectra:
length(query(ms))

## Both object contain however still the full target `Spectra`:
length(target(ms))
length(target(ms_sub))

## With the `pruneTarget` we can however reduce also the target spectra to
## only those that match at least one query spectrum
ms_sub <- pruneTarget(ms_sub)
length(target(ms_sub))
}
\author{
Johannes Rainer
}
