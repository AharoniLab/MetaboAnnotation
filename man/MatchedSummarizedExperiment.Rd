% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MatchedSummarizedExperiment.R
\name{MatchedSummarizedExperiment}
\alias{MatchedSummarizedExperiment}
\alias{MatchedSummarizedExperiment-class}
\alias{colnames,MatchedSummarizedExperiment-method}
\alias{$,MatchedSummarizedExperiment-method}
\alias{matchedData,MatchedSummarizedExperiment-method}
\title{Representation of SummarizedExperiment matches}
\usage{
MatchedSummarizedExperiment(
  query = SummarizedExperiment(),
  target = data.frame(),
  matches = data.frame(query_idx = integer(), target_idx = integer(), score =
    numeric())
)

\S4method{colnames}{MatchedSummarizedExperiment}(x)

\S4method{$}{MatchedSummarizedExperiment}(x, name)

\S4method{matchedData}{MatchedSummarizedExperiment}(object, columns = colnames(object), ...)
}
\arguments{
\item{query}{\code{SummarizedExperiment} object having as \code{rowData} a \code{DFrame}
with rows to be matched to those in \code{target}}

\item{target}{\code{data.frame} with the elements against which \code{query} has been
matched.}

\item{matches}{\code{data.frame} with columns \code{"query_idx"} (\code{integer}),
\code{"target_idx"} (\code{integer}) and \code{"score"} (\code{numeric}) representing the n:m
mapping between the rows of \code{rowData} of query\verb{and the}target` rows.}

\item{x}{\code{MatchedSummarizedExperiment} object.}

\item{name}{for \code{$}: the name of the column (or variable) to extract.}

\item{object}{a \code{MatchedSummarizedExperiment} object.}

\item{columns}{for \code{matchedData}: \code{character} vector with column names of
variables that should be extracted.}

\item{...}{additional parameters.}

\item{drop}{for \code{[}: ignored.}

\item{i}{\code{integer} or \code{logical} defining the \code{query} elements to keep.}

\item{j}{for \code{[}: ignored.}
}
\value{
See individual method description above for details.
}
\description{
Matches between a query \code{SummarizedExperiment} and target \code{data.frame} can be
represented by the\code{MatchedSummarizedExperiment} object. Functions like the
\code{\link[=matchSummarizedExperiment]{matchSummarizedExperiment()}} function will return this type of object.
By default, all data accessors work as \emph{left joins} between the \emph{query}
\code{SummarizedExperiment} and the \emph{target} \code{data.frame}, i.e. values are
returned for each row in \code{rowData} of \emph{query}  with eventual duplicated
entries (values) if such row matches more than one target row.
}
\section{Creation and subsetting}{


\code{MatchedSummarizedExperiment} objects can be created with the
\code{MatchedSummarizedExperiment} function providing the \code{query}
\code{SummarizedExperiment} and \code{target} \code{data.frame} as well as a \code{data.frame}
with two columns of integer indices defining which elements from \code{rowData}
of \emph{query} match which element from \emph{target}.
\itemize{
\item \code{[} subsets the rows to keep (specified throught parameter \code{i}) in
\code{rowData} of \code{query} . The \code{target} \code{data.frame} will by default be
returned as-is.
\item \code{pruneTarget} \emph{cleans} the \code{MatchedSummarizedExperiment} object by removing
non-matched rows in target \code{data.frame}.
}
}

\section{Extracting data}{

\itemize{
\item \code{$} extracts a single variable from the \code{MatchedSummarizedExperiment} \code{x}.
The variables that can be extracted can be listed using \code{colnames(x)}.
These variables can belong to \code{rowData} of \emph{query}, \emph{target} or be related
to the matches (e.g. the score of each match available as \emph{variable}
\code{"score"}). Prefix\code{ "target_"} is used for columns in the \emph{target} object.
Similar to a left join between the query \code{rowData} rows and target rows,
this function returns a value for each query row, with eventual
duplicated values for query rows matching more than one target element.
If variables from the target \code{data.frame} are extracted, an \code{NA} is
reported for the entries corresponding to \emph{query} \code{rowData} rows that don't
match any target row See examples below for more details.
\item \code{length} returns the number of rows in \strong{query} \code{rowData}.
\item \code{matchedData} allows to extract multiple variables contained in the
\code{MatchedSummarizedExperiment} object as a \code{DataFrame}. Parameter \code{columns}
allows to define which columns (or variables) should be returned (defaults
to \code{columns = colnames(object)}). Each single column in the returned
\code{DataFrame} is constructed in the same way as in \code{$}. That is, like \code{$},
this function performs a \emph{left join} of variables from the \emph{query} and
\emph{target} objects returning all values for rows in query \code{rowData}
(eventually returning duplicated elements for query elements matching
multiple targetelements) and the values for the target elements matched to
the respective query elements (or \code{NA} if the target element is not matched
to any query element).
\item \code{target} returns the \emph{target} \code{data.frame}.
\item \code{query} returns the \emph{query} \code{SummarizedExperiment}.
\item \code{whichTarget} returns an \code{integer} with the indices of the rows in
\emph{target} that match at least one row in \code{rowData} of \emph{query}.
\item \code{whichQuery} returns an \code{integer} with the indices of the rows in \code{rowData}
of \emph{query} that match at least one row in \emph{target}.
}
}

\examples{

## Creating a MatchedSummarizedExperiment object.
library(SummarizedExperiment)
q1 <- SummarizedExperiment(
  assays = data.frame(matrix(NA, 5, 2)), 
  rowData = data.frame(col1 = 1:5, col2 = 6:10),
  colData = data.frame(cD1 = c(NA, NA), cD2 = c(NA, NA)))
t1 <- data.frame(col1 = 11:16, col2 = 17:22)
## Define matches between row 1 in rowData(q1) with target row 2 and, 
## rowData(q1) row 2 with target rows 2,3,4 and rowData(q1) row 5 with target 
## row 5.
mo <- MatchedSummarizedExperiment(
    q1, t1, matches = data.frame(query_idx = c(1L, 2L, 2L, 2L, 5L),
                                target_idx = c(2L, 2L, 3L, 4L, 5L),
                                 score = seq(0.5, 0.9, by = 0.1)))
mo

## Which of the query elements (rows) match at least one target
## element (row)?
whichQuery(mo)

## Which target elements (rows) match at least one query element (row)?
whichTarget(mo)

## Extracting variable "col1" from rowData(q1).
mo$col1

## We have duplicated values for the entries of `col1` related to rows of 
## rowData(q1) matched to multiple rows of the target data.frame t1. The
## value of `col1` is returned for each row in the rowData of query.

## Extracting variable "col1" from target object. To access columns from
## target we have to prefix the name of the column by `"target_"`.
## Note that only values of `col1` for rows matching at least one row in 
## rowData of query are returned and an NA is reported for those without 
## matching target rows.
mo$target_col1

## The 3rd and 4th query rows do not match any target row, thus `NA` is
## returned.

## `matchedData` can be used to extract all (or selected) columns
## from the object. Same as with `$`, a left join between the columns
## from the query and the target is performed. Below we extract selected
## columns from the object as a DataFrame.
res <- matchedData(mo, columns = c("col1", "col2", "target_col1", "target_col2"))
res
res$col1
res$target_col1

## The example MatchedSummarizedExperiment object contains all rows in the 
## rowData of the SummarizedExperiment and all target rows. Below we subset the 
## object keeping only rows that are matched to at least one target row.
mo_sub <- mo[whichQuery(mo)]

## mo_sub contains now a SummarizedExperiment with only 3 rows:
nrow(query(mo_sub))

## while the original object contains a SummarizedExperiment with all 5 rows:
nrow(query(mo))

## Both objects contain however still the full target object:
nrow(target(mo))
nrow(target(mo_sub))

## With the `pruneTarget` we can however reduce also the target rows to
## only those that match at least one in the rowData of query
mo_sub <- pruneTarget(mo_sub)
nrow(target(mo_sub))
}
\author{
Andrea Vicini, Johannes Rainer
}
