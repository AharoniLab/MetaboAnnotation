% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matchSpectra.R
\name{CompareSpectraParam}
\alias{CompareSpectraParam}
\alias{CompareSpectraParam-class}
\alias{MatchForwardReverseParam-class}
\alias{MatchForwardReverseParam}
\alias{matchSpectra,Spectra,Spectra,CompareSpectraParam-method}
\alias{matchSpectra,Spectra,Spectra,MatchForwardReverseParam-method}
\title{Matching MS Spectra against a reference}
\usage{
CompareSpectraParam(
  MAPFUN = joinPeaks,
  tolerance = 0,
  ppm = 5,
  FUN = MsCoreUtils::ndotproduct,
  requirePrecursor = TRUE,
  requirePrecursorPeak = FALSE,
  THRESHFUN = function(x) which(x >= 0.7),
  ...
)

MatchForwardReverseParam(
  MAPFUN = joinPeaks,
  tolerance = 0,
  ppm = 5,
  FUN = MsCoreUtils::ndotproduct,
  requirePrecursor = TRUE,
  requirePrecursorPeak = FALSE,
  THRESHFUN = function(x) which(x >= 0.7),
  ...
)

\S4method{matchSpectra}{Spectra,Spectra,CompareSpectraParam}(query, target, param, BPPARAM = BiocParallel::SerialParam())

\S4method{matchSpectra}{Spectra,Spectra,MatchForwardReverseParam}(query, target, param, BPPARAM = BiocParallel::SerialParam())
}
\arguments{
\item{MAPFUN}{\code{function} used to map peaks between the compared spectra.
Defaults for \code{CompareSpectraParam} to \code{\link[=joinPeaks]{joinPeaks()}}. See
\code{\link[=compareSpectra]{compareSpectra()}} for details.}

\item{tolerance}{\code{numeric(1)} for an absolute maximal accepted difference
between m/z values. This will be used in \code{compareSpectra} as well as for
eventual precursor m/z matching.}

\item{ppm}{\code{numeric(1)} for a relative, m/z-dependent, maximal accepted
difference between m/z values. This will be used in \code{compareSpectra} as
well as for eventual precursor m/z matching.}

\item{FUN}{\code{function} used to calculate similarity between spectra. Defaults
for \code{CompareSpectraParam} to \code{\link[MsCoreUtils:distance]{MsCoreUtils::ndotproduct()}}. See
\code{\link[MsCoreUtils:distance]{MsCoreUtils::ndotproduct()}} for details.}

\item{requirePrecursor}{\code{logical(1)} whether only target spectra are
considered in the similarity calculation with a precursor m/z that matches
the precursor m/z of the query spectrum (considering also \code{ppm} and
\code{tolerance}). With \code{requirePrecursor = TRUE} (the default) the function
will complete much faster, but will not find any hits for target (or query
spectra) with missing precursor m/z. It is suggested to check first the
availability of the precursor m/z in \code{target} and \code{query}.}

\item{requirePrecursorPeak}{\code{logical(1)} whether only target spectra will be
considered in the spectra similarity calculation that have a peak with an
m/z matching the precursor m/z of the query spectrum. Defaults to
\code{requirePrecursorPeak = FALSE}. It is suggested to check first the
availability of the precursor m/z in \code{query}, as no match will be reported
for query spectra with missing precursor m/z.}

\item{THRESHFUN}{\code{function} applied to the similarity score to define which
target spectra are considered \emph{matching}. Defaults to
\code{THRESHFUN = function(x) which(x >= 0.7)} hence selects
all target spectra matching a query spectrum with a similarity higher or
equal than \code{0.7}. Any function that takes a numeric vector with similarity
scores from the comparison of a query spectrum with all target spectra (as
returned by \code{\link[=compareSpectra]{compareSpectra()}}) as input and returns a
\code{logical} vector (same dimensions as the similarity scores) or an integer
with the matches is supported.}

\item{...}{for \code{CompareSpectraParam}: additional parameters passed along
to the \code{\link[=compareSpectra]{compareSpectra()}} call.}

\item{query}{for \code{matchSpectra}: \link{Spectra} object with the query spectra.}

\item{target}{for \code{matchSpectra}: \link{Spectra} object with the target
(reference) spectra to compare \code{query} against.}

\item{param}{for \code{matchSpectra}: parameter object (such as
\code{CompareSpectraParam}) defining the settings for the matching.}

\item{BPPARAM}{for \code{matchSpectra}: parallel processing setup (see the
\code{BiocParallel} package for more information). Parallel processing is
disabled by default.}
}
\description{
\code{matchSpectra} with both \code{query} and \code{target} being a \link{Spectra} object
matches each spectra in \code{query} against all spectra in \code{target} and reports
matches with a similarity that passes the \code{THRESHFUN} condition. The
parameters for the matching can be specified with one of the \code{param} objects
listed below:
\itemize{
\item \code{CompareSpectraParam}: the \emph{generic} parameter object allowing to set all
settings for the \code{\link[=compareSpectra]{compareSpectra()}} call that is used to perform the
similarity calculation. This includes \code{MAPFUN} and \code{FUN} defining the
peak-mapping and similarity calculation functions and \code{ppm} and \code{tolerance}
to define an acceptable difference between m/z values of the compared
peaks. Additional parameters to the \code{compareSpectra} call
can be passed along with \code{...}. See the help of \code{\link[=Spectra]{Spectra()}} for more
information on these parameters. Parameters \code{requirePrecursor} (default
\code{TRUE}) and \code{requirePrecursorPeak} (default \code{FALSE}) allow to pre-filter
the target spectra prior to the actual similarity calculation for each
individual query spectrum. This can considerably improve performance.
Finally, parameter \code{THRESHFUN} allows to define a function to be applied to
the similarity scores to define which matches to report. See below for more
details.
\item \code{MatchForwardReverseParam}: performs spectra matching as with
\code{CompareSpectraParam} but reports, similar to MS-DIAL, also the \emph{reverse}
similarity score and the \emph{presence ratio}. In detail, the matching of query
spectra to target spectra is performed by considering all peaks from the
query and all peaks from the target (reference) spectrum (i.e. \emph{forward}
matching using an \emph{outer join}-based peak matching strategy). For matching
spectra also the \emph{reverse} similarity is calculated considering only peaks
present in the target (reference) spectrum (i.e. using a \emph{right join}-based
peak matching). This is reported as spectra variable \code{"reverse_score"}.
In addition, the ratio between the number of matched peaks and the total
number of peaks in the target (reference) spectra is reported as the
\emph{presence ratio} (spectra variable \code{"presence_ratio"}) and the total
number of matched peaks as \code{"matched_peaks_count"}. See examples below
for details.
}
}
\examples{

library(Spectra)
library(msdata)
fl <- system.file("TripleTOF-SWATH", "PestMix1_DDA.mzML", package = "msdata")
pest_ms2 <- filterMsLevel(Spectra(fl), 2L)

## subset to selected spectra.
pest_ms2 <- pest_ms2[c(808, 809, 945:955)]

## Load a small example MassBank data set
load(system.file("extdata", "minimb.RData", package = "MetaboAnnotation"))

## Match spectra with the default similarity score (normalized dot product)
csp <- CompareSpectraParam(requirePrecursor = TRUE, ppm = 10)
mtches <- matchSpectra(pest_ms2, minimb, csp)

mtches

## Are there any matching spectra for the first query spectrum?
mtches[1]
## No

## And for the second query spectrum?
mtches[2]
## The second query spectrum matches 4 target spectra. The scores for these
## matches are:
mtches[2]$score

## To access the score for the full data set
mtches$score

## Below we use a THRESHFUN that returns for each query spectrum the (first)
## best matching target spectrum.
csp <- CompareSpectraParam(requirePrecursor = FALSE, ppm = 10,
    THRESHFUN = function(x) which.max(x))
mtches <- matchSpectra(pest_ms2, minimb, csp)
mtches

## Each of the query spectra is matched to one target spectrum
length(mtches)
matches(mtches)

## See the package vignette for details, descriptions and more examples.
}
\author{
Johannes Rainer, Michael Witting
}
